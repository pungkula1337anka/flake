#!/bin/bash

# Function to create directory structure and standard files
create_fastapi_project() {
  PROJECT_NAME=$1

  if [ -z "$PROJECT_NAME" ]; then
    echo "Usage: $0 <project_name>"
    exit 1
  fi

  echo "Setting up FastAPI project: $PROJECT_NAME..."

  # Create the project directory structure
  mkdir -p $PROJECT_NAME/{app,tests,docs,config}
  mkdir -p $PROJECT_NAME/app/{api,core,models,schemas,crud,routers}
  mkdir -p $PROJECT_NAME/app/{static,templates}
  mkdir -p $PROJECT_NAME/config/{nginx,caddy}

  # Create basic Python files
  touch $PROJECT_NAME/app/__init__.py
  touch $PROJECT_NAME/app/api/__init__.py
  touch $PROJECT_NAME/app/core/__init__.py
  touch $PROJECT_NAME/app/models/__init__.py
  touch $PROJECT_NAME/app/schemas/__init__.py
  touch $PROJECT_NAME/app/crud/__init__.py
  touch $PROJECT_NAME/app/routers/__init__.py

  # Create README.md file
  create_readme $PROJECT_NAME

  # Create Dockerfile
  create_dockerfile $PROJECT_NAME

  # Create docker-compose.yaml
  create_docker_compose $PROJECT_NAME

  # Create .gitignore file
  create_gitignore $PROJECT_NAME

  # Create requirements.txt file
  create_requirements $PROJECT_NAME

  # Create Caddyfile
  create_caddyfile $PROJECT_NAME

  echo "FastAPI project setup complete!"
}

create_readme() {
  cat <<EOF >$1/README.md
# $1

## Description

This project is built using [FastAPI](https://fastapi.tiangolo.com/), a high-performance web framework for building APIs with Python 3.7+.

## Getting Started

### Installation

1. Clone the repository:

   \`\`\`bash
   git clone https://github.com/yourusername/$1.git
   cd $1
   \`\`\`

2. Install dependencies:

   \`\`\`bash
   pip install -r requirements.txt
   \`\`\`

3. Run the application:

   \`\`\`bash
   uvicorn app.main:app --reload
   \`\`\`

   The application will be available at [http://127.0.0.1:8000](http://127.0.0.1:8000).

### Docker

1. Build the Docker image:

   \`\`\`bash
   docker-compose build
   \`\`\`

2. Run the Docker container:

   \`\`\`bash
   docker-compose up
   \`\`\`

### Deployment

To deploy the application, use Docker with a web server like [Caddy](https://caddyserver.com/) or Nginx for production environments.

## Project Structure

\`\`\`
$1/
├── app/
│   ├── api/        # API endpoints
│   ├── core/       # Core configurations (settings, middlewares)
│   ├── models/     # Database models
│   ├── schemas/    # Pydantic models (input/output validation)
│   ├── crud/       # Database CRUD operations
│   ├── routers/    # Route declarations
│   ├── static/     # Static files (images, css, js)
│   ├── templates/  # HTML templates (if using Jinja)
├── tests/          # Unit and integration tests
├── config/         # Configuration for deployment (Caddy, Nginx, etc.)
├── docs/           # Project documentation
├── Dockerfile      # Docker configuration
├── docker-compose.yaml # Docker Compose file
├── README.md       # Project overview and instructions
├── requirements.txt # Python dependencies
└── .gitignore      # Files to be ignored by Git
\`\`\`

EOF
}

create_dockerfile() {
  cat <<EOF >$1/Dockerfile
# Use the official Python image from the Docker Hub
FROM python:3.9-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set working directory
WORKDIR /code

# Install dependencies
COPY requirements.txt /code/
RUN pip install --no-cache-dir -r requirements.txt

# Copy project
COPY . /code/

# Run the FastAPI app with Uvicorn
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
EOF
}

create_docker_compose() {
  cat <<EOF >$1/docker-compose.yaml
version: '3.9'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/code
    env_file:
      - .env
    command: >
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
EOF
}

create_gitignore() {
  cat <<EOF >$1/.gitignore
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
env/
venv/
ENV/
build/
dist/
*.egg-info/
.eggs/

# Virtual environments
*.env
.venv
EOF
}

create_requirements() {
  cat <<EOF >$1/requirements.txt
fastapi
uvicorn
EOF
}

create_caddyfile() {
  cat <<EOF >$1/config/caddy/Caddyfile
localhost

route / {
  reverse_proxy 0.0.0.0:8000
}
EOF
}

# Start the script
create_fastapi_project "$1"
